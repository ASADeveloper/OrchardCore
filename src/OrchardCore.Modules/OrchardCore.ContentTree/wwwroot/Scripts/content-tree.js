/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

// <global-notifications> component  
Vue.component('globalNotifications', {
    template: '\
        <div id="global-notifications" v-if="notifications.length > 0">\
                <div class="alert" :class="alertClass(n)" v-for="n in notifications">\
                    <span>{{ n.title }} : {{n.detail}}</span>\
                </div>\
        </div>\
        ',
    data: function () {
        return {
            notifications: []
        }
    },
    created: function () {
        var self = this;

        // we expect an ajaxError that has a responseText an object like this https://tools.ietf.org/html/rfc7807        
        bus.$on('ajaxErrorNotificaton', function (ajaxError) {
            var notification = {
                isWarning: true,
                title: 'Error',
                detail: 'There was an error when calling the server.'
            };
            
            try {
                parsedResponse = JSON.parse(ajaxError.responseText);
                if (parsedResponse.title) { notification.title = parsedResponse.title; }
                if (parsedResponse.detail) { notification.detail = parsedResponse.detail; }
            } finally {
                self.notifications.push(notification);
            }

        });

        bus.$on('successNotificaton', function (notification) {
            if (!notification) {
                notification = { title: 'OK', detail: 'The operation completed successfully.' };
            }
            notification.isSuccess = true;
            self.notifications.push(notification);
        });

        bus.$on('clearNotifications', function () {
            self.notifications = [];
        })
    },
    methods: {
        alertClass: function (notification) {
            if (!notification) { return 'message-information'; }

            if (notification.isWarning) { return 'message-warning'; }
            else if (notification.isSuccess) { return 'message-success'; }
            else { return 'message-information'; }
        }
    }
});

// <column-sorter> component
Vue.component('columnSorter', {
    template: '\
        <div v-show="isActive" style="display: inline-block; margin-left: 8px;"> \
            <span v-show="asc"><i class="small fa fa-chevron-up"></i></span> \
            <span v-show="!asc"><i class="small fa fa-chevron-down"></i></span> \
        </div> \
        ',
    props: {
        colname: String,
        selectedcolname: String,
        asc: Boolean
    },
    computed: {
        isActive: function () {
            if (this.selectedcolname == '') {                
                return false;
            }
            return this.colname.toLowerCase() == this.selectedcolname.toLowerCase();
        }
    }
});

// <content-status-display> component
Vue.component('contentStatusDisplay', {
    template: '\
        <span :title="status">\
            <i class="fa fa-circle mr-2 status-mark published" :class="{ exist : publishedExist }" ></i>\
            <i class="fa fa-circle mr-2 status-mark draft" :class="{ exist : draftExist }"></i>\
        </span>\
    ',
    props: {
        status: String
    },
    data: function () {
        return {
            contentStatusEnumValues: {}
        }
    },
    mounted: function () {
        this.contentStatusEnumValues = content_tree.ContentStatusEnumValues;        
    },
    computed: {
        statusText: function () {
            return this.contentStatusEnumValues[this.status];
        },
        publishedExist: function () {
            return (this.status.toLowerCase() == 'publishedwithdraft') || (this.status.toLowerCase() == 'publishedonly');
        },
        draftExist: function () {
            return (this.status.toLowerCase() == 'publishedwithdraft') || (this.status.toLowerCase() == 'draftonly');
        }        
    }
});

// <filter-box> component
Vue.component('filterBox', {
    template: '\
        <nav class="nav filter-box ocf align-items-stretch form-inline ">\
            <div class="nav-item">\
                <div class="form-group mr-4 mb-2">\
                    <label for="contentStatusSelect" class="label mr-2">{{res.contentStatusLabelText}}</label>\
                    <select id="contentStatusSelect" class="form-control form-control-sm" v-model="selectedOptions.contentStatusSelectedOption">\
                        <option v-for="o in contentStatusFilterOptions" :value="o.value">{{o.text}}</option>\
                    </select>\
                </div>\
            </div>\
            <div class="nav-item form-inline">\
                <div class="form-check mr-4 mb-2">\
                    <input id="ownedByMeCheckbox" class="form-check-input" type="checkbox" :checked="selectedOptions.ownedByMe" v-model="selectedOptions.ownedByMe"/>\
                    <label for="ownedByMeCheckbox" class="form-check-label">{{res.ownedByMeLabelText}}</label>\
                </div>\
            </div>\
        </nav>\
    ',
    data: function () {
        return {
            res: {},
            contentStatusFilterOptions: [],
            selectedOptions: {
                contentStatusSelectedOption: {},
                ownedByMe: true
            }            
        }
    },
    mounted: function () {

        // retrieve strings
        this.res = content_tree.res;
        this.contentStatusFilterOptions = content_tree.ContentStatusFilterOptions;
        this.selectedOptions.contentStatusSelectedOption = this.contentStatusFilterOptions[0].value;
        console.log(content_tree.ContentStatusFilterOptions);
    },
    watch: {
        'selectedOptions.contentStatusSelectedOption': function () {
            this.emitChangeInfo();
        },
        'selectedOptions.ownedByMe': function () {
            this.emitChangeInfo();
        }
    },
    methods: {
        emitChangeInfo: function () {
            bus.$emit('filterBoxChanged', $.param(this.selectedOptions));
        }
    }
});

// <tree-node> component
Vue.component('treeNode', {
    template: '\
        <li :class="{selected: isSelected}" >\
            <div :class="{treeroot: level == 1}">\
                <a href="javascript:;" :style="{ paddingLeft: padding + \'px\' }" v-on:click="select"  draggable="false" >\
                  <span v-on:click.stop="toggle" class="expand" :class="{opened: open, closed: !open, empty: empty}"><i class="fas fa-chevron-right"></i></span>  \
                  {{model.title}}\
                </a>\
            </div>\
            <ol v-show="open">\
                <tree-node v-for="folder in children"\
                        :key="folder.path"\
                        :model="folder" \
                        :selected-in-media-app="selectedInMediaApp" \
                        :level="level + 1">\
                </tree-node>\
            </ol>\
        </li>\
        ',
    name: 'treeNode',
    props: {
        model: Object,
        selectedInMediaApp: Object,
        level: Number
    },
    data: function () {
        return {
            open: false,
            children: null, // not initialized state (for lazy-loading)
            parent: null,
            isHovered: false,
            padding: 0
        }
    },
    computed: {
        empty: function () {
            return !this.children || this.children.length == 0;
        },
        isSelected: function () {
            return false; //return (this.selectedInMediaApp.name == this.model.name) && (this.selectedInMediaApp.path == this.model.path);
        }
    },
    mounted: function () {
        this.padding = this.level < 3 ?  26 : 26 + (this.level * 8);
    },
    created: function () {
        var self = this;
    },
    methods: {
        toggle: function () {
            console.log('toggling');
            this.open = !this.open;
            if (this.open && !this.children) {
                this.loadChildren();
            }
        },
        select: function () {
            this.loadChildren();
            bus.$emit('currentNodeChanged', this.model);           
        },
        loadChildren: function () {
            var self = this;

            if (self.model.isLeaf) {                
                return; // when is leaf there are no children
            }

            if (this.open == false) {
                this.open = true;
            }
            $.ajax({
                url: content_tree.GetChildrenUrl +
                    '?parentId=' + encodeURIComponent(self.model.id)
                    + '&parentType=' + encodeURIComponent(self.model.type),
                method: 'GET',
                success: function (data) {
                    //console.log('children are:');
                    //console.log(data);
                    self.children = data;
                },
                error: function (error) {
                    emtpy = false;
                    console.error(error.responseText);
                }
            });
        }
    }
});

var bus = new Vue();
var contentTreeApp = new Vue({
    el: '#content-tree',
    data: {
        res: {},
        sortDirections: {},
        providers: [],        
        contentItems: [],
        currentNode: {},
        filterBoxParams: '',
        sortBy: '',
        sortAsc: false,        
        queryUrl: '',
        returnUrl: '',
        noResults: false,
        errors: []
    },
    created: function () {
        var self = this;

        bus.$on('currentNodeChanged', function (currentNode) {
            console.log('currentNodeChanged');
            console.log(currentNode);
            if (!currentNode) {                
                return;
            }
            self.currentNode = currentNode;

            if (currentNode.url) {                
                self.queryUrl = currentNode.url;
            }

        });
        bus.$on('leafUrlChanged', function (url) {            
            self.queryUrl = url;
        });

        bus.$on('filterBoxChanged', function (filterBoxParams) {
            self.filterBoxParams = filterBoxParams;            
        });

    },
    mounted: function () {
        this.res = content_tree.res;
        this.sortDirections = content_tree.SortDirections;
        this.returnUrl = content_tree.returnUrl;

        this.loadProviders();        
    },
    computed: {
        currentQuery: function () {
            var sortDirection = this.sortAsc ? this.sortDirections.asc : this.sortDirections.desc;            
            return this.queryUrl
                    + '&' + this.filterBoxParams
                    + '&sortBy=' + this.sortBy
                    + '&sortDir=' + sortDirection
                    + '&returnUrl=' + this.returnUrl ;
        }
    },
    watch: {
        currentQuery: function () {
            this.queryContentItems();
        }
    },
    methods: {
        loadProviders: function () {
            var self = this;
            var url = content_tree.GetTreeNodeProvidersUrl;
            $.ajax({
                url: url,
                method: 'GET',
                success: function (data) {
                    self.providers = data;                   
                },
                error: function (error) {
                    console.log('error getting providers');
                }
            });
        },
        queryContentItems: function () {
            var self = this;
            self.noResults = false;
            bus.$emit('clearNotifications');
            if (self.queryUrl === '') {
                return; // not a leaf selected yet?
            }

            $.ajax({
                url: self.currentQuery,
                method: 'GET',
                success: function (data) {
                    console.log('new content items are:');
                    console.log(data);
                    self.contentItems = data;
                    self.noResults = data.length < 1;
                },
                error: function (error) {
                    emtpy = false;
                    self.contentItems = [];                    
                    bus.$emit('ajaxErrorNotificaton', error);
                }
            });
        },
        changeSort: function (newSort) {
            if (this.sortBy === newSort) {
                this.sortAsc = !this.sortAsc;
            } else {
                this.sortAsc = true;
                this.sortBy = newSort;
            }
        }
    } 
})
//# sourceMappingURL=data:application/json;charset=utf8;base64,
